#!/bin/sh
# hwclock.sh Set system clock to hardware clock, according to the UTC
#			 setting in /etc/default/hwclock
#
# WARNING:	If your hardware clock is not in UTC/GMT, this script
#			must know the local time zone. This information is
#			stored in /etc/localtime. This might be a problem if
#			your /etc/localtime is a symlink to something in
#			/usr/share/zoneinfo AND /usr isn't in the root
#			partition! The workaround is to define TZ either
#			in /etc/default/hwclock, or in the proper place below.

[ ! -x /sbin/hwclock ] && exit 0

. /etc/default/hwclock

[ "$UTC" = yes ] && UTC=--utc || UTC=--localtime

if [ ! -z "$HWCLOCKDEVICE" ]; then
	if [ -e $HWCLOCKDEVICE ]; then
		DEVICE="--rtc $HWCLOCKDEVICE"
	fi
fi

if [ ! -z "$ADJFILE" ]; then
	if [ -w $(dirname $ADJFILE) ]; then
		ADJ="--adjfile $ADJFILE"
	fi
fi

case "$1" in
	start)
		echo "System time was `date`."
		echo "Setting the System Clock using the Hardware Clock as reference..."
		if [ "$HWCLOCKACCESS" != no ]
		then
			if [ -z "$TZ" ]
			then
				hwclock $ADJ --hctosys $UTC $DEVICE
			else
				TZ="$TZ" hwclock $ADJ --hctosys $UTC $DEVICE
			fi
		fi
		echo "System Clock set. System local time is now `date`."
		;;
	stop|restart|reload|force-reload)
		#
		# Updates the Hardware Clock with the System Clock time.
		# This will *override* any changes made to the Hardware Clock.
		#
		# WARNING: If you disable this, any changes to the system
		#		  clock will not be carried across reboots.
		#
		echo "Saving the System Clock time to the Hardware Clock..."
		if [ "$HWCLOCKACCESS" != no ]
		then
			hwclock --systohc $ADJ $UTC $DEVICE
		fi
		echo "Hardware Clock updated to `date`."
		exit 0
		;;
	show)
		if [ "$HWCLOCKACCESS" != no ]
		then
			hwclock $ADJ --show $UTC $DEVICE
		fi
		;;
	*)
		echo "Usage: hwclock.sh {start|stop|show|reload|restart}" >&2
		echo " start sets kernel (system) clock from hardware (RTC) clock" >&2
		echo " stop and reload set hardware (RTC) clock from kernel (system) clock" >&2
		exit 1
		;;
esac
